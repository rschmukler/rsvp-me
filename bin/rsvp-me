#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    chalk = require('chalk'),
    YAML = require('yaml');

var program = require('commander');

program.version(require('../package.json').version);


program
  .option('-a, --api-key <key>', 'specify meetup API key')
  .option('-c, --config <path>', 'set the config path.', '~/.rsvpmerc')
  .option('-s, --save', 'saves the config')
  .parse(process.argv);

if(program.config) program.config = resolvePath(program.config);

if(fs.existsSync(program.config) && !program.save) loadConfig(run);
else run();

function loadConfig(cb) {
  printInfo("Loading config at %s", program.config);
  fs.readFile(program.config, function(err, contents) {
    var config  = JSON.parse(contents);
    program.apiKey = config.apiKey;
    cb();
  });
}

function saveConfig(cb) {
  printInfo("Saving config to %s", program.config);
  var config = {
    apiKey: program.apiKey
  };
  fs.writeFile(program.config, JSON.stringify(config), cb);
}

function run() {
  if(!program.apiKey) throwError(new Error("Api Key not found in config path nor specified by -a flag"));
  if(program.save) saveConfig();
}


// Some Helper methods

function printInfo() {
  var args = Array.prototype.slice.call(arguments);
  var msg = '[' + chalk.green('info') + '] ' + args.shift();
  console.log.apply(this, [msg].concat(args));
}

function throwError(err) {
  console.log('[' + chalk.red('error') + '] ' + err.message);
  process.exit(1);
}

function resolvePath(string) {
  if (string.substr(0,1) === '~')
    string = process.env.HOME + string.substr(1);
  return path.resolve(string);
}
